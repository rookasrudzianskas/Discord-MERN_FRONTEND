{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","axios.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","instance","axios","create","baseURL","pusher","Pusher","cluster","Sidebar","useSelector","useState","channels","setChannels","console","log","getChannels","get","then","res","data","useEffect","subscribe","bind","e","preventDefault","prompt","post","map","channel","key","fontSize","Avatar","src","photo","signOut","displayName","uid","substring","ChatHeader","type","placeholder","Message","timestamp","message","Date","parseInt","toDateString","Chat","input","setInput","messages","sendMessages","getConversation","conversation","disabled","value","onChange","target","hidden","now","Login","alt","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84ffa56f.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState: {\n        channelId: null,\n        channelName: null\n    },\n    reducers: {\n        setChannelInfo: (state, action) => {\n            state.channelId = action.payload.channelId\n            state.channelName = action.payload.channelName\n        }\n    },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = (state) => state.app.channelId;\nexport const selectChannelName = (state) => state.app.channelName;\n\nexport default appSlice.reducer;\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setChannelInfo } from './features/appSlice'\nimport './SidebarChannel.css'\n\nconst SidebarChannel = ({ id, channelName }) => {\n    const dispatch = useDispatch()\n    return (\n        <div className='sidebarChannel' onClick={() => dispatch(setChannelInfo({\n            channelId: id,\n            channelName: channelName\n        }))} >\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\n        </div>\n    )\n}\n\nexport default SidebarChannel\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = state => state.user.user;\n\nexport default userSlice.reducer;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBg8dZ85X5DHbzEvBfMB-N8_g9u5xuO4lc\",\n    authDomain: \"rookas-discord-mern-app.firebaseapp.com\",\n    projectId: \"rookas-discord-mern-app\",\n    storageBucket: \"rookas-discord-mern-app.appspot.com\",\n    messagingSenderId: \"639069515735\",\n    appId: \"1:639069515735:web:24e2034dccb562f6abe592\",\n    measurementId: \"G-W0XY7ZX4BX\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\n\nconst db = firebaseApp.firestore()\nconst auth = firebase.auth()\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport { auth, provider }\nexport default db","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://rookas-backend-mern-discord.herokuapp.com/'\n});\n\nexport default instance;","import React from 'react'\nimport './Sidebar.css'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport SidebarChannel from './SidebarChannel'\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport CallIcon from '@material-ui/icons/Call'\nimport { Avatar } from '@material-ui/core'\nimport MicIcon from '@material-ui/icons/Mic'\nimport HeadsetIcon from '@material-ui/icons/Headset'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\nimport db, { auth } from './firebase'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport axios from \"./axios\";\nimport Pusher from \"pusher-js\";\n\nconst pusher = new Pusher('eb7cd7f1e1f39229a9e3', {\n    cluster: 'eu'\n});\n\nconst Sidebar = () => {\n    const user = useSelector(selectUser);\n    const [channels, setChannels] = useState([]);\n\n    console.log(channels)\n    const getChannels = () => {\n        axios.get('/get/channelList').then((res) => {\n            setChannels(res.data);\n        })\n    }\n\n    useEffect(() => {\n        getChannels();\n\n        const channel = pusher.subscribe(\"channels\");\n        channel.bind(\"newChannel\", function (data) {\n            getChannels();\n        });\n    }, []);\n\n    const handleAddChannel = (e) => {\n        e.preventDefault()\n\n        const channelName = prompt('Enter a new channel name');\n\n        if (channelName) {\n            axios.post(\"/new/channel\", {\n                channelName: channelName,\n            });\n        }\n    };\n\n    return (\n        <div className='sidebar' >\n            <div className=\"sidebar__top\">\n                <h3>Clever Programmer</h3>\n                <ExpandMoreIcon />\n            </div>\n\n            <div className=\"sidebar__channels\">\n                <div className=\"sidebar__channelsHeader\">\n                    <div className=\"sidebar__header\">\n                        <ExpandMoreIcon />\n                        <h4>Text Channels</h4>\n                    </div>\n\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\n                </div>\n                <div className=\"sidebar__channelsList\">\n                    {channels.map((channel) => (\n                        <SidebarChannel\n                            key={channel.id}\n                            id={channel.id}\n                            channelName={channel.name}\n                        />\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"sidebar__voice\">\n                <SignalCellularAltIcon className='sidebar__voiceIcons' fontSize='large' />\n                <div className=\"sidebar__voiceInfo\">\n                    <h3>Voice Connected</h3>\n                    <p>Stream</p>\n                </div>\n\n                <div className=\"sidebar__voiceIcons\">\n                    <InfoOutlinedIcon />\n                    <CallIcon />\n                </div>\n            </div>\n            <div className=\"sidebar__profile\">\n                <Avatar src={user.photo} onClick={() => auth.signOut()} />\n                <div className=\"sidebar__profileInfo\">\n                    <h3>{user.displayName}</h3>\n                    <p>#{user.uid.substring(0, 5)}</p>\n                </div>\n\n                <div className=\"sidebar__profileIcons\">\n                    <MicIcon />\n                    <HeadsetIcon />\n                    <SettingsIcon />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './ChatHeader.css'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport EditLocationRounded from '@material-ui/icons/EditLocationRounded'\nimport PeopleAltRounded from '@material-ui/icons/PeopleAltRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\n\nconst ChatHeader = ({ channelName }) => {\n    return (\n        <div className='chatHeader' >\n            <div className=\"chatHeader__left\">\n                <h3><span className=\"chatHeader__hash\">#</span>\n                    {channelName}\n                    </h3>\n            </div>\n\n            <div className=\"chatHeader__right\">\n                <NotificationsIcon />\n                <EditLocationRounded />\n                <PeopleAltRounded />\n\n                <div className=\"chatHeader__search\">\n                    <input type=\"text\" placeholder='Search' />\n                    <SearchRoundedIcon />\n                </div>\n\n                <SendRoundedIcon />\n                <HelpRoundedIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport './Message.css'\n\nconst Message = ({ timestamp, user, message }) => {\n// const Message = ({ message }) => {\n\n    // console.log(message)\n\n    return (\n        <div className='message' >\n            <Avatar src={user?.photo} />\n            <div className=\"message__info\">\n                <h4>{user.displayName}\n                    <span className=\"message__timestamp\">{new Date(parseInt(timestamp)).toDateString()}</span>\n                </h4>\n\n                <p>{message}</p> \n        </div>\n        </div >\n    )\n}\n\nexport default Message\n","import React from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions'\nimport Message from './Message'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\nimport { selectChannelId, selectChannelName } from './features/appSlice'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport axios from \"./axios\";\nimport Pusher from \"pusher-js\";\n\nconst pusher = new Pusher('eb7cd7f1e1f39229a9e3', {\n    cluster: 'eu'\n});\n\nconst Chat = () => {\n    const user = useSelector(selectUser)\n    const channelId = useSelector(selectChannelId)\n    const channelName = useSelector(selectChannelName)\n    const [input, setInput] = useState('')\n    const [messages, sendMessages] = useState([])\n\n    const getConversation = (channelId) => {\n        if(channelId) {\n            axios.get(`/get/conversation?id=${channelId}`).then((res) => {\n                sendMessages(res.data[0].conversation);\n            })\n        }\n    }\n\n    useEffect(() => {\n        getConversation(channelId);\n\n        const channel = pusher.subscribe(\"conversation\");\n        channel.bind(\"newMessage\", function (data) {\n            getConversation(channelId);\n        });\n\n    }, [channelId]);\n\n    const sendMessage = (e) => {\n        e.preventDefault()\n\n        axios.post(`/new/message?id=${channelId}`, {\n            message: input,\n            timestamp: Date.now(),\n            user: user,\n        })\n\n        setInput('');\n    }\n\n    return (\n        <div className='chat' >\n            <ChatHeader channelName={channelName} />\n\n            <div className=\"chat__messages\">\n                {messages.map((message) => {\n                    console.log(message)\n                })}\n                {messages.map(message => (\n                    <Message key={message.timestamp} message={message.message} timestamp={message.timestamp} user={message.user} />\n                ))}\n            </div>\n\n            <div className=\"chat__input\">\n                <AddCircleIcon fontSize='large' />\n                <form>\n                    <input type=\"text\" disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\n                    <button className='chat__inputButton' hidden onClick={sendMessage} disabled={!channelId} type='submit'>Send Message</button>\n                </form>\n\n                <div className=\"chat__inputIcon\">\n                    <CradGiftcardIcon fontSize='large' />\n                    <GifIcon fontSize='large' />\n                    <EmojiEmoticonsIcon fontSize='large' />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport './Login.css'\nimport { auth, provider } from './firebase'\n\nconst Login = () => {\n    const signIn = () => {\n        // clever google login shizz...\n\n        auth.signInWithPopup(provider).catch((err) => alert(err.message))\n    }\n    return (\n        <div className='login' >\n            <div className=\"login__logo\">\n                <img src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-logo-logodownload-download-logotipos-1.png\" alt=\"discord logo\" />\n            </div>\n\n            <Button onClick={signIn}>Sign In</Button>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport Chat from './Chat';\nimport { selectUser } from './features/userSlice';\nimport { useDispatch, useSelector } from 'react-redux'\nimport Login from './Login';\nimport { useEffect } from 'react';\nimport { auth } from './firebase';\nimport { login, logout } from './features/userSlice'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const user = useSelector(selectUser)\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n\n      console.log(authUser)\n\n      if (authUser) {\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName\n        }))\n      } else {\n        dispatch(logout())\n      }\n    })\n  }, [dispatch])\n\n  console.log(user)\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n\n      ) : (\n          <Login />\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice'\nimport appReducer from '../features/appSlice'\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}